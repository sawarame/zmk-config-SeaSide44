#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_MAC 0
#define DEFAULT_WIN 1
#define MOUSE 2
#define SCROLL_AND_FUNCTION 3
#define NUM_AND_SYMBOL 4
#define NUM_AND_SYMBOL_JP 5
#define SHORTCUT_MAC 6
#define SHORTCUT_WIN 7
#define CONFIG 8

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
    tapping-term-ms = <180>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <200>;
    tapping-term-ms = <180>;
};

/ {
    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <19 20>;
        };
    };

    macros {
        escape_lang2: escape_lang2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LANG2>;
            label = "ESCAPE_LANG2";
        };

        bt_0: bt_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_DISC 1 &bt BT_DISC 2>;
            label = "BT_0";
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_DISC 0 &bt BT_DISC 2>;
            label = "BT_1";
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_DISC 0 &bt BT_DISC 1>;
            label = "BT_2";
        };
    };

    behaviors {
        shft: shft {
            compatible = "zmk,behavior-hold-tap";
            label = "SHFT";
            #binding-cells = <2>;
            tapping-term-ms = <0>;
            bindings = <&kp>, <&kp>;
        };

        mthp: mthp {
            compatible = "zmk,behavior-hold-tap";
            label = "MTHP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
        };

        mt_escape: mt_escape {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_ESCAPE";
            bindings = <&kp>, <&escape_lang2>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "hold-preferred";
            quick-tap-ms = <200>;
        };
    };

    keycodes  {
        compatible = "zmk,keycodes";

        JIS_YEN: jis_yen {
            bindings = <&shft 0x89 LS(0x89)>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_MAC {
            bindings = <
&kp TAB                     &kp Q  &kp W           &kp E           &kp R            &kp T                                                            &kp Y        &kp U  &kp I                  &kp O            &kp P          &kp EQUAL
&mthp LCTRL LEFT_BRACKET    &kp A  &kp S           &kp D           &kp F            &kp G                                                            &kp H        &kp J  &kp K                  &lt 2 L          &kp SEMICOLON  &mthp RCTRL MINUS
&mthp RSHIFT RIGHT_BRACKET  &kp Z  &mt LEFT_ALT X  &mt LEFT_GUI C  &kp V            &kp B                                                            &kp N        &kp M  &mthp RIGHT_GUI COMMA  &mt RALT PERIOD  &kp SLASH      &mthp RSHIFT BACKSLASH
                                   &to 0           &to 1           &lt 3 LC(SPACE)  &lt 4 SPACE  &mt_escape LSHIFT 0    &mthp RIGHT_SHIFT BACKSPACE  &lt 6 ENTER         &mo 8
            >;
        };

        DEFAULT_WIN {
            bindings = <
&trans  &trans  &trans  &trans              &trans       &trans                         &trans       &trans  &trans                   &trans  &trans  &trans
&trans  &trans  &trans  &trans              &trans       &trans                         &trans       &trans  &trans                   &trans  &trans  &trans
                &trans  &trans              &lt 3 GRAVE  &lt 5 SPACE  &trans    &trans  &lt 7 ENTER          &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans           &msc SCRL_DOWN  &trans          &trans                    &trans  &trans    &trans    &trans  &trans  &trans
&trans  &trans  &msc SCRL_RIGHT  &msc SCRL_UP    &msc SCRL_LEFT  &trans                    &trans  &mkp MB1  &mkp MB2  &trans  &trans  &trans
&trans  &trans  &trans           &trans          &trans          &trans                    &trans  &mkp MB3  &trans    &trans  &trans  &trans
                &trans           &trans          &trans          &trans  &trans    &trans  &trans            &trans
            >;
        };

        SCROLL_AND_FUNCTION {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5                    &kp F6          &kp F7          &kp F8        &kp F9             &kp F10          &trans
&trans  &kp F11  &kp F12  &trans  &trans  &trans                    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &lt 2 RIGHT_ARROW  &trans           &trans
&trans  &trans   &trans   &trans  &trans  &trans                    &trans          &kp C_BRI_DN    &kp C_BRI_UP  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans
                 &trans   &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        NUM_AND_SYMBOL {
            bindings = <
&kp GRAVE  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                         &kp N6     &kp N7         &kp N8        &kp N9    &kp N0    &kp DOUBLE_QUOTES
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LPAR  &kp RPAR  &kp SINGLE_QUOTE
&trans     &trans           &trans       &trans    &trans      &trans                         &trans     &trans         &trans        &trans    &trans    &trans
                            &trans       &trans    &trans      &trans       &trans    &trans  &trans                    &trans
            >;
        };

        NUM_AND_SYMBOL_JP {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3        &kp N4  &kp N5                    &kp N6     &kp N7     &kp N8         &kp N9  &kp N0  &kp AT
&trans  &trans  &trans  &trans        &trans  &trans                    &kp EQUAL  &kp CARET  &trans         &trans  &trans  &kp AMPERSAND
&trans  &trans  &trans  &kp LEFT_WIN  &trans  &trans                    &trans     &trans     &kp RIGHT_WIN  &trans  &trans  &trans
                &trans  &trans        &trans  &trans  &trans    &trans  &trans                &trans
            >;
        };

        SHORTCUT_MAC {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans         &kp LS(LG(NUMBER_4))      &kp LS(LG(LC(NUMBER_4)))   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp LG(GRAVE)  &kp LS(LG(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans         &trans                    &trans                     &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans                 &trans
            >;
        };

        SHORTCUT_WIN {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };

        CONFIG {
            bindings = <
&trans  &bt_0           &bt_1          &bt_2          &trans         &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_DISC 0   &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR_ALL  &bt BT_CLR     &trans         &trans         &trans                           &trans  &trans  &trans  &trans  &trans  &trans
                        &trans         &trans         &trans         &trans         &trans    &trans  &trans          &trans
            >;
        };
    };
};
