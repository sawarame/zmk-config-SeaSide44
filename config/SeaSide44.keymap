#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_MAC 0
#define DEFAULT_WIN 1
#define MOUSE 2
#define SCROLL_AND_FUNCTION 3
#define NUM_AND_SYMBOL 4
#define NUM_AND_SYMBOL_JIS 5
#define SHORTCUT_MAC 6
#define SHORTCUT_WIN 7
#define SHIFT_WIN 8
#define CONFIG 9

// OS設定を日本語キーボードのまま使用するための変換定義
#define JIS_EQUAL        UNDER             // =
#define JIS_PLUS         COLON             // +
#define JIS_COLON        SINGLE_QUOTE      // :
#define JIS_UNDERSCORE   LS(0x87)          // _
#define JIS_LBRACKET     RIGHT_BRACKET     // [
#define JIS_RBRACKET     BACKSLASH         // ]
#define JIS_LBRACE       RIGHT_BRACE       // {
#define JIS_RBRACE       PIPE              // }
#define JIS_YEN          0x89              // ¥
#define JIS_PIPE         LS(0x89)          // |
#define JIS_KANA         LANGUAGE_1        // かな
#define JIS_EISU         LANGUAGE_2        // 英数
#define JIS_HANZEN       GRAVE             // 半角/全角

#define JIS_BACKQUOTE    LEFT_BRACE        // `
#define JIS_TILDE        PLUS              // ~
#define JIS_AT           LEFT_BRACKET      // @
#define JIS_CARET        EQUAL             // ^
#define JIS_AMPERSAND    CARET             // &
#define JIS_ASTERISK     DOUBLE_QUOTES     // *
#define JIS_LPAR         ASTERISK          // (
#define JIS_RPAR         LEFT_PARENTHESIS  // )
#define JIS_DQUOTE       AT                // "
#define JIS_QUOTE        AMPERSAND         // '


&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
    tapping-term-ms = <180>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <200>;
    tapping-term-ms = <180>;
};

/ {
    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <19 20>;
        };
    };

    macros {
        escape_lang2: escape_lang2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LANG2>;
            label = "ESCAPE_LANG2";
        };

        alt_space_lang2: alt_space_lang2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE) &kp LANG2>;
            label = "ALT_SPACE_LANG2";
        };
        
        command_space_lang2: command_space_lang2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp LANG2>;
            label = "COMMAND_SPACE_LANG2";
        };

        bt_0: bt_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_DISC 1 &bt BT_DISC 2 &to 0>;
            label = "BT_0";
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_DISC 0 &bt BT_DISC 2 &to 0>;
            label = "BT_1";
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_DISC 0 &bt BT_DISC 1 &to 1>;
            label = "BT_2";
        };
    };

    behaviors {
        mthp: mthp {
            compatible = "zmk,behavior-hold-tap";
            label = "MTHP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
        };

        mt_escape: mt_escape {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_ESCAPE";
            bindings = <&kp>, <&escape_lang2>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_MAC {
            bindings = <
&kp TAB                     &kp Q  &kp W           &kp E           &kp R            &kp T                                                            &kp Y        &kp U  &kp I                  &kp O            &kp P          &kp EQUAL
&mthp LCTRL LEFT_BRACKET    &kp A  &kp S           &kp D           &kp F            &kp G                                                            &kp H        &kp J  &kp K                  &lt 2 L          &kp SEMICOLON  &mthp RCTRL MINUS
&mthp LSHIFT RIGHT_BRACKET  &kp Z  &mt LEFT_ALT X  &mt LEFT_GUI C  &kp V            &kp B                                                            &kp N        &kp M  &mthp RIGHT_GUI COMMA  &mt RALT PERIOD  &kp SLASH      &mthp RSHIFT BACKSLASH
                                   &to 0           &to 1           &lt 3 LC(SPACE)  &lt 4 SPACE  &mt_escape LSHIFT 0    &mthp RIGHT_SHIFT BACKSPACE  &lt 6 ENTER         &mo 9
            >;
        };

        DEFAULT_WIN {
            bindings = <
&kp TAB                   &kp Q           &kp W           &kp E        &kp R             &kp T                                                            &kp Y        &kp U  &kp I              &kp O            &kp P                 &kp JIS_EQUAL
&mthp LCTRL JIS_LBRACKET  &kp A           &kp S           &kp D        &kp F             &kp G                                                            &kp H        &kp J  &kp K              &lt 2 L          &kp SEMICOLON         &mthp RCTRL MINUS
&lt 8 JIS_RBRACKET        &mt LEFT_WIN Z  &mt LEFT_ALT X  &mt LCTRL C  &kp V             &kp B                                                            &kp N        &kp M  &mthp RCTRL COMMA  &mt RALT PERIOD  &mt RIGHT_WIN SLASH   &lt 8 JIS_YEN
                                          &to 0           &to 1        &lt 3 JIS_HANZEN  &lt 5 SPACE  &mt_escape LSHIFT 0    &mthp RIGHT_SHIFT BACKSPACE  &lt 7 ENTER         &mo 9
            >;
        };

        MOUSE {
            bindings = <
&trans      &trans  &trans           &msc SCRL_DOWN  &trans          &trans                    &trans  &trans    &trans    &trans  &trans  &trans
&kp LCTRL   &trans  &msc SCRL_RIGHT  &msc SCRL_UP    &msc SCRL_LEFT  &trans                    &trans  &mkp MB1  &mkp MB2  &trans  &trans  &kp RCTRL
&kp LSHIFT  &trans  &trans           &trans          &trans          &trans                    &trans  &mkp MB3  &trans    &trans  &trans  &kp RSHIFT
                    &trans           &trans          &trans          &trans  &trans    &trans  &trans            &trans
            >;
        };

        SCROLL_AND_FUNCTION {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5                    &kp F6          &kp F7          &kp F8        &kp F9             &kp F10       &trans
&trans  &kp F11  &kp F12  &trans  &trans  &trans                    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &lt 2 RIGHT_ARROW  &kp C_BRI_UP  &kp C_VOLUME_UP 
&trans  &trans   &trans   &trans  &trans  &trans                    &trans          &trans          &trans        &trans             &kp C_BRI_DN  &kp C_VOLUME_DOWN
                 &trans   &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        NUM_AND_SYMBOL {
            bindings = <
&kp GRAVE  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                         &kp N6     &kp N7         &kp N8        &kp N9    &kp N0    &kp DOUBLE_QUOTES
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LPAR  &kp RPAR  &kp SINGLE_QUOTE
&trans     &trans           &trans       &trans    &trans      &trans                         &trans     &trans         &trans        &trans    &trans    &trans
                            &trans       &trans    &trans      &trans       &trans    &trans  &trans                    &trans
            >;
        };

        NUM_AND_SYMBOL_JIS {
            bindings = <
&kp JIS_BACKQUOTE  &kp N1           &kp N2      &kp N3    &kp N4      &kp N5                         &kp N6         &kp N7             &kp N8            &kp N9        &kp N0        &kp JIS_DQUOTE
&kp JIS_TILDE      &kp EXCLAMATION  &kp JIS_AT  &kp HASH  &kp DOLLAR  &kp PERCENT                    &kp JIS_CARET  &kp JIS_AMPERSAND  &kp JIS_ASTERISK  &kp JIS_LPAR  &kp JIS_RPAR  &kp JIS_QUOTE
&trans             &trans           &trans      &trans    &trans      &trans                         &trans         &trans             &trans            &trans        &trans        &trans
                                    &trans      &trans    &trans      &trans       &trans    &trans  &trans                            &trans
            >;
        };

        SHORTCUT_MAC {
            bindings = <
&trans  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)          &kp LG(N4)            &kp LG(N5)                                  &trans  &trans                &kp LG(MINUS)             &kp LG(LS(EQUAL))          &trans                 &trans
&trans  &trans      &kp LG(Q)   &kp LG(BACKSPACE)   &kp LC(UP_ARROW)      &trans                                      &trans  &kp LG(LEFT_BRACKET)  &kp LS(LG(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))  &kp LG(RIGHT_BRACKET)  &trans
&trans  &trans      &trans      &trans              &trans                &trans                                      &trans  &command_space_lang2  &kp LC(LEFT_ARROW)        &kp LC(RIGHT_ARROW)        &trans                 &trans
                    &trans      &trans              &kp LS(LG(NUMBER_4))  &kp LS(LG(LC(NUMBER_4)))  &trans    &trans  &trans                        &trans
            >;
        };

        SHORTCUT_WIN {
            bindings = <
&trans  &kp LC(N1)  &kp LC(N2)  &kp LC(N3)  &kp LC(N4)   &kp LC(N5)                              &trans  &trans              &kp LC(MINUS)           &kp LC(JIS_PLUS)         &trans               &trans
&trans  &trans      &kp LA(F4)  &kp DELETE  &kp LG(TAB)  &trans                                  &trans  &kp LA(LEFT_ARROW)  &kp LS(LC(TAB))         &kp LC(TAB)              &kp LA(RIGHT_ARROW)  &trans
&trans  &trans      &trans      &trans      &trans       &trans                                  &trans  &alt_space_lang2    &kp LG(LC(LEFT_ARROW))  &kp LG(LC(RIGHT_ARROW))  &trans               &trans
                    &trans      &trans      &trans       &kp LG(LS(S))  &kp LG(LC(T))    &trans  &trans                      &trans
            >;
        };
        
        SHIFT_WIN {
            bindings = <
&kp TAB         &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)   &kp LS(T)                      &kp RS(Y)  &kp RS(U)  &kp RS(I)  &kp RS(O)  &kp RS(P)      &kp JIS_PLUS
&kp JIS_LBRACE  &kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(F)   &kp LS(G)                      &kp RS(H)  &kp RS(J)  &kp RS(K)  &kp RS(L)  &kp JIS_COLON  &kp JIS_UNDERSCORE
&kp JIS_RBRACE  &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)   &kp LS(B)                      &kp RS(N)  &kp RS(M)  &kp LT     &kp GT     &kp QUESTION   &kp JIS_PIPE
                           &trans     &trans     &trans      &trans       &trans    &trans  &trans                &trans
            >;
        };

        CONFIG {
            bindings = <
&trans  &bt_0           &bt_1          &bt_2          &trans         &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_DISC 0   &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR_ALL  &bt BT_CLR     &trans         &trans         &trans                           &trans  &trans  &trans  &trans  &trans  &trans
                        &trans         &trans         &trans         &trans         &trans    &trans  &trans          &trans
            >;
        };
    };
};
